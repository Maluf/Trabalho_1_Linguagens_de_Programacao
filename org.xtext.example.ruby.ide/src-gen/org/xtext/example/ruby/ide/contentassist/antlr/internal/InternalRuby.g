/*
 * generated by Xtext 2.12.0
 */
grammar InternalRuby;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.ruby.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.ruby.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.ruby.services.RubyGrammarAccess;

}
@parser::members {
	private RubyGrammarAccess grammarAccess;

	public void setGrammarAccess(RubyGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getBeginAssignment()); }
		(rule__Model__BeginAssignment)*
		{ after(grammarAccess.getModelAccess().getBeginAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBegin
entryRuleBegin
:
{ before(grammarAccess.getBeginRule()); }
	 ruleBegin
{ after(grammarAccess.getBeginRule()); } 
	 EOF 
;

// Rule Begin
ruleBegin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBeginAccess().getGroup()); }
		(rule__Begin__Group__0)
		{ after(grammarAccess.getBeginAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRescue
entryRuleRescue
:
{ before(grammarAccess.getRescueRule()); }
	 ruleRescue
{ after(grammarAccess.getRescueRule()); } 
	 EOF 
;

// Rule Rescue
ruleRescue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRescueAccess().getGroup()); }
		(rule__Rescue__Group__0)
		{ after(grammarAccess.getRescueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnsure
entryRuleEnsure
:
{ before(grammarAccess.getEnsureRule()); }
	 ruleEnsure
{ after(grammarAccess.getEnsureRule()); } 
	 EOF 
;

// Rule Ensure
ruleEnsure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnsureAccess().getGroup()); }
		(rule__Ensure__Group__0)
		{ after(grammarAccess.getEnsureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnd
entryRuleEnd
:
{ before(grammarAccess.getEndRule()); }
	 ruleEnd
{ after(grammarAccess.getEndRule()); } 
	 EOF 
;

// Rule End
ruleEnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEndAccess().getEndKeyword()); }
		'end'
		{ after(grammarAccess.getEndAccess().getEndKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBeginAccess().getBeginParserRuleCall_2_0()); }
		ruleBegin
		{ after(grammarAccess.getBeginAccess().getBeginParserRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getBeginAccess().getRescueParserRuleCall_2_1()); }
		ruleRescue
		{ after(grammarAccess.getBeginAccess().getRescueParserRuleCall_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getBeginAccess().getEnsureParserRuleCall_2_2()); }
		ruleEnsure
		{ after(grammarAccess.getBeginAccess().getEnsureParserRuleCall_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rescue__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRescueAccess().getBeginParserRuleCall_2_0()); }
		ruleBegin
		{ after(grammarAccess.getRescueAccess().getBeginParserRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getRescueAccess().getRescueParserRuleCall_2_1()); }
		ruleRescue
		{ after(grammarAccess.getRescueAccess().getRescueParserRuleCall_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getRescueAccess().getEnsureParserRuleCall_2_2()); }
		ruleEnsure
		{ after(grammarAccess.getRescueAccess().getEnsureParserRuleCall_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ensure__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnsureAccess().getBeginParserRuleCall_2_0()); }
		ruleBegin
		{ after(grammarAccess.getEnsureAccess().getBeginParserRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getEnsureAccess().getRescueParserRuleCall_2_1()); }
		ruleRescue
		{ after(grammarAccess.getEnsureAccess().getRescueParserRuleCall_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getEnsureAccess().getEnsureParserRuleCall_2_2()); }
		ruleEnsure
		{ after(grammarAccess.getEnsureAccess().getEnsureParserRuleCall_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__0__Impl
	rule__Begin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getBeginKeyword_0()); }
	'begin'
	{ after(grammarAccess.getBeginAccess().getBeginKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__1__Impl
	rule__Begin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getCOMMANDSTerminalRuleCall_1()); }
	(RULE_COMMANDS)?
	{ after(grammarAccess.getBeginAccess().getCOMMANDSTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__2__Impl
	rule__Begin__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getAlternatives_2()); }
	(rule__Begin__Alternatives_2)?
	{ after(grammarAccess.getBeginAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getEndParserRuleCall_3()); }
	ruleEnd
	{ after(grammarAccess.getBeginAccess().getEndParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rescue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rescue__Group__0__Impl
	rule__Rescue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rescue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRescueAccess().getRescueKeyword_0()); }
	'rescue'
	{ after(grammarAccess.getRescueAccess().getRescueKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rescue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rescue__Group__1__Impl
	rule__Rescue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rescue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRescueAccess().getCOMMANDSTerminalRuleCall_1()); }
	(RULE_COMMANDS)?
	{ after(grammarAccess.getRescueAccess().getCOMMANDSTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rescue__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rescue__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rescue__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRescueAccess().getAlternatives_2()); }
	(rule__Rescue__Alternatives_2)?
	{ after(grammarAccess.getRescueAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ensure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ensure__Group__0__Impl
	rule__Ensure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ensure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnsureAccess().getEnsureKeyword_0()); }
	'ensure'
	{ after(grammarAccess.getEnsureAccess().getEnsureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ensure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ensure__Group__1__Impl
	rule__Ensure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ensure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnsureAccess().getCOMMANDSTerminalRuleCall_1()); }
	(RULE_COMMANDS)?
	{ after(grammarAccess.getEnsureAccess().getCOMMANDSTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ensure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ensure__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ensure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnsureAccess().getAlternatives_2()); }
	(rule__Ensure__Alternatives_2)?
	{ after(grammarAccess.getEnsureAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__BeginAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getBeginBeginParserRuleCall_0()); }
		ruleBegin
		{ after(grammarAccess.getModelAccess().getBeginBeginParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_COMMANDS : ('a'..'z'|'A'..'Z'|'0'..'9'|' '|'\'\'')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
