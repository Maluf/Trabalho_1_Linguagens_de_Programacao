/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.ruby.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RubyGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ruby.Ruby.Model");
		private final Assignment cBeginAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBeginBeginParserRuleCall_0 = (RuleCall)cBeginAssignment.eContents().get(0);
		
		//Model:
		//	begin+=Begin*;
		@Override public ParserRule getRule() { return rule; }
		
		//begin+=Begin*
		public Assignment getBeginAssignment() { return cBeginAssignment; }
		
		//Begin
		public RuleCall getBeginBeginParserRuleCall_0() { return cBeginBeginParserRuleCall_0; }
	}
	public class BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ruby.Ruby.Begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCOMMANDSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cBeginParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cRescueParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cEnsureParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final RuleCall cEndParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Begin:
		//	'begin' COMMANDS? (Begin | Rescue | Ensure)? End;
		@Override public ParserRule getRule() { return rule; }
		
		//'begin' COMMANDS? (Begin | Rescue | Ensure)? End
		public Group getGroup() { return cGroup; }
		
		//'begin'
		public Keyword getBeginKeyword_0() { return cBeginKeyword_0; }
		
		//COMMANDS?
		public RuleCall getCOMMANDSTerminalRuleCall_1() { return cCOMMANDSTerminalRuleCall_1; }
		
		//(Begin | Rescue | Ensure)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//Begin
		public RuleCall getBeginParserRuleCall_2_0() { return cBeginParserRuleCall_2_0; }
		
		//Rescue
		public RuleCall getRescueParserRuleCall_2_1() { return cRescueParserRuleCall_2_1; }
		
		//Ensure
		public RuleCall getEnsureParserRuleCall_2_2() { return cEnsureParserRuleCall_2_2; }
		
		//End
		public RuleCall getEndParserRuleCall_3() { return cEndParserRuleCall_3; }
	}
	public class RescueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ruby.Ruby.Rescue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRescueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCOMMANDSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cBeginParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cRescueParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cEnsureParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		
		//Rescue:
		//	'rescue' COMMANDS? (Begin | Rescue | Ensure)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'rescue' COMMANDS? (Begin | Rescue | Ensure)?
		public Group getGroup() { return cGroup; }
		
		//'rescue'
		public Keyword getRescueKeyword_0() { return cRescueKeyword_0; }
		
		//COMMANDS?
		public RuleCall getCOMMANDSTerminalRuleCall_1() { return cCOMMANDSTerminalRuleCall_1; }
		
		//(Begin | Rescue | Ensure)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//Begin
		public RuleCall getBeginParserRuleCall_2_0() { return cBeginParserRuleCall_2_0; }
		
		//Rescue
		public RuleCall getRescueParserRuleCall_2_1() { return cRescueParserRuleCall_2_1; }
		
		//Ensure
		public RuleCall getEnsureParserRuleCall_2_2() { return cEnsureParserRuleCall_2_2; }
	}
	public class EnsureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ruby.Ruby.Ensure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnsureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCOMMANDSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cBeginParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cRescueParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cEnsureParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		
		//Ensure:
		//	'ensure' COMMANDS? (Begin | Rescue | Ensure)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'ensure' COMMANDS? (Begin | Rescue | Ensure)?
		public Group getGroup() { return cGroup; }
		
		//'ensure'
		public Keyword getEnsureKeyword_0() { return cEnsureKeyword_0; }
		
		//COMMANDS?
		public RuleCall getCOMMANDSTerminalRuleCall_1() { return cCOMMANDSTerminalRuleCall_1; }
		
		//(Begin | Rescue | Ensure)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//Begin
		public RuleCall getBeginParserRuleCall_2_0() { return cBeginParserRuleCall_2_0; }
		
		//Rescue
		public RuleCall getRescueParserRuleCall_2_1() { return cRescueParserRuleCall_2_1; }
		
		//Ensure
		public RuleCall getEnsureParserRuleCall_2_2() { return cEnsureParserRuleCall_2_2; }
	}
	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ruby.Ruby.End");
		private final Keyword cEndKeyword = (Keyword)rule.eContents().get(1);
		
		//End:
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'end'
		public Keyword getEndKeyword() { return cEndKeyword; }
	}
	
	
	private final ModelElements pModel;
	private final BeginElements pBegin;
	private final RescueElements pRescue;
	private final EnsureElements pEnsure;
	private final EndElements pEnd;
	private final TerminalRule tCOMMANDS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RubyGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pBegin = new BeginElements();
		this.pRescue = new RescueElements();
		this.pEnsure = new EnsureElements();
		this.pEnd = new EndElements();
		this.tCOMMANDS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.ruby.Ruby.COMMANDS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.ruby.Ruby".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	begin+=Begin*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Begin:
	//	'begin' COMMANDS? (Begin | Rescue | Ensure)? End;
	public BeginElements getBeginAccess() {
		return pBegin;
	}
	
	public ParserRule getBeginRule() {
		return getBeginAccess().getRule();
	}
	
	//Rescue:
	//	'rescue' COMMANDS? (Begin | Rescue | Ensure)?;
	public RescueElements getRescueAccess() {
		return pRescue;
	}
	
	public ParserRule getRescueRule() {
		return getRescueAccess().getRule();
	}
	
	//Ensure:
	//	'ensure' COMMANDS? (Begin | Rescue | Ensure)?;
	public EnsureElements getEnsureAccess() {
		return pEnsure;
	}
	
	public ParserRule getEnsureRule() {
		return getEnsureAccess().getRule();
	}
	
	//End:
	//	'end';
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}
	
	//terminal COMMANDS:
	//	'a'..'z' | 'A'..'Z' | '0'..'9' | ' ' | "''"*;
	public TerminalRule getCOMMANDSRule() {
		return tCOMMANDS;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
