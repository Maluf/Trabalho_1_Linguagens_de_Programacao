/*
 * generated by Xtext 2.12.0
 */
grammar InternalRuby;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.ruby.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.ruby.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.ruby.services.RubyGrammarAccess;

}

@parser::members {

 	private RubyGrammarAccess grammarAccess;

    public InternalRubyParser(TokenStream input, RubyGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected RubyGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getBeginBeginParserRuleCall_0());
			}
			lv_begin_0_0=ruleBegin
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"begin",
					lv_begin_0_0,
					"org.xtext.example.ruby.Ruby.Begin");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleBegin
entryRuleBegin returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBeginRule()); }
	iv_ruleBegin=ruleBegin
	{ $current=$iv_ruleBegin.current.getText(); }
	EOF;

// Rule Begin
ruleBegin returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='begin'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBeginAccess().getBeginKeyword_0());
		}
		(
			this_COMMANDS_1=RULE_COMMANDS
			{
				$current.merge(this_COMMANDS_1);
			}
			{
				newLeafNode(this_COMMANDS_1, grammarAccess.getBeginAccess().getCOMMANDSTerminalRuleCall_1());
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getBeginAccess().getBeginParserRuleCall_2_0());
			}
			this_Begin_2=ruleBegin
			{
				$current.merge(this_Begin_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getBeginAccess().getRescueParserRuleCall_2_1());
			}
			this_Rescue_3=ruleRescue
			{
				$current.merge(this_Rescue_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getBeginAccess().getEnsureParserRuleCall_2_2());
			}
			this_Ensure_4=ruleEnsure
			{
				$current.merge(this_Ensure_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getBeginAccess().getEndParserRuleCall_3());
		}
		this_End_5=ruleEnd
		{
			$current.merge(this_End_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRescue
entryRuleRescue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRescueRule()); }
	iv_ruleRescue=ruleRescue
	{ $current=$iv_ruleRescue.current.getText(); }
	EOF;

// Rule Rescue
ruleRescue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='rescue'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRescueAccess().getRescueKeyword_0());
		}
		(
			this_COMMANDS_1=RULE_COMMANDS
			{
				$current.merge(this_COMMANDS_1);
			}
			{
				newLeafNode(this_COMMANDS_1, grammarAccess.getRescueAccess().getCOMMANDSTerminalRuleCall_1());
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getRescueAccess().getBeginParserRuleCall_2_0());
			}
			this_Begin_2=ruleBegin
			{
				$current.merge(this_Begin_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getRescueAccess().getRescueParserRuleCall_2_1());
			}
			this_Rescue_3=ruleRescue
			{
				$current.merge(this_Rescue_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getRescueAccess().getEnsureParserRuleCall_2_2());
			}
			this_Ensure_4=ruleEnsure
			{
				$current.merge(this_Ensure_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleEnsure
entryRuleEnsure returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEnsureRule()); }
	iv_ruleEnsure=ruleEnsure
	{ $current=$iv_ruleEnsure.current.getText(); }
	EOF;

// Rule Ensure
ruleEnsure returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='ensure'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEnsureAccess().getEnsureKeyword_0());
		}
		(
			this_COMMANDS_1=RULE_COMMANDS
			{
				$current.merge(this_COMMANDS_1);
			}
			{
				newLeafNode(this_COMMANDS_1, grammarAccess.getEnsureAccess().getCOMMANDSTerminalRuleCall_1());
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getEnsureAccess().getBeginParserRuleCall_2_0());
			}
			this_Begin_2=ruleBegin
			{
				$current.merge(this_Begin_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getEnsureAccess().getRescueParserRuleCall_2_1());
			}
			this_Rescue_3=ruleRescue
			{
				$current.merge(this_Rescue_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getEnsureAccess().getEnsureParserRuleCall_2_2());
			}
			this_Ensure_4=ruleEnsure
			{
				$current.merge(this_Ensure_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleEnd
entryRuleEnd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEndRule()); }
	iv_ruleEnd=ruleEnd
	{ $current=$iv_ruleEnd.current.getText(); }
	EOF;

// Rule End
ruleEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='end'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEndAccess().getEndKeyword());
	}
;

RULE_COMMANDS : ('a'..'z'|'A'..'Z'|'0'..'9'|' '|'\'\'')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
